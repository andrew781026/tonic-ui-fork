---
import DarkImage from '../img/Dark.png';
import colors from '../../../src/grouped_design_token.json';

/*
  // ref : https://css-tricks.com/switch-font-color-for-different-backgrounds-with-css/
  --light =
  --threshold: 65 => the threshold at which colors are considered "light". Range: integers from 0 to 100, recommended 50 - 70
  --switch: calc((var(--light) - var(--threshold)) * -100%);
    color: hsl(0, 0%, var(--switch));
  item.color => calc(--switch)
 */
const textColorSwitcher = bgColor => {

  if (!bgColor) return '';

  const threshold = 65 ;
  let sep = bgColor.indexOf(",") > -1 ? "," : " ";
  let rgb = bgColor.substr(5).split(")")[0].split(sep);

  for (let R in rgb) {
    let r = rgb[R];
    if (r.indexOf("%") > -1)
      rgb[R] = Math.round(r.substr(0,r.length - 1) / 100 * 255);
  }

  // Make r, g, and b fractions of 1
  let r = rgb[0] ,
    g = rgb[1] ,
    b = rgb[2] ;

  const {h, s, l} = rgbToHsl(r,g,b);
  // console.log('bgColor=',bgColor,'~ light=',l * 100,' >> l * 100 >  threshold',l * 100 >  threshold);
  return ( l * 100 >  threshold ) ? 'text-black' : 'text-white';
}

const getHex = bgColor => {

  if (!bgColor) return '';

  let sep = bgColor.indexOf(",") > -1 ? "," : " ";
  let rgb = bgColor.substr(5).split(")")[0].split(sep);

  for (let R in rgb) {
    let r = rgb[R];
    if (r.indexOf("%") > -1)
      rgb[R] = Math.round(r.substr(0,r.length - 1) / 100 * 255);
  }

  // Make r, g, and b fractions of 1
  let r = rgb[0] ,
    g = rgb[1] ,
    b = rgb[2] ;

  return rgbToHex(r,g,b);
}

// ref: https://css-tricks.com/converting-color-spaces-in-javascript/
//      https://gist.github.com/mjackson/5311256
function rgbToHsl(r, g, b) {
  r /= 255, g /= 255, b /= 255;

  var max = Math.max(r, g, b), min = Math.min(r, g, b);
  var h, s, l = (max + min) / 2;

  if (max == min) {
    h = s = 0; // achromatic
  } else {
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

    switch (max) {
      case r: h = (g - b) / d + (g < b ? 6 : 0); break;
      case g: h = (b - r) / d + 2; break;
      case b: h = (r - g) / d + 4; break;
    }

    h /= 6;
  }

  return { h, s, l };
}

function rgbToHex(r, g, b) {
  const hexR = parseInt(r).toString(16).padStart(2,'0');
  const hexG = parseInt(g).toString(16).padStart(2,'0');
  const hexB = parseInt(b).toString(16).padStart(2,'0');
  return "#" + hexR + hexG + hexB;
}
---

<!DOCTYPE html>
<html lang="zh-tw">
<head>
  <title>Color Palette</title>
  <meta charset="utf-8"/>
  <link rel="icon" type="image/png" sizes="16x16" href={DarkImage}>
</head>
<body>
<main class="h-screen content-center p-8">
  <h1 class="flex text-3xl items-center mb-16">
    <img class="mr-4" src={DarkImage} alt="logo" width="50" height="50"/>
    Token - Color Palettes
  </h1>
  <div class="flex flex-wrap gap-4">
    {Object.entries(colors).map(([key, value]) => (
      <div class="flex flex-col w-[360px] mix-blend-difference">
        <div class={`text-2xl font-900 w-full p-3 uppercase bg-${value[0]?.colorName} ${textColorSwitcher(value[0]?.colorName)}`}>
          {key}
        </div>
        {
          value.map(item => (
            <div class={`flex w-full p-3 bg-${item.colorName} ${textColorSwitcher(item.color)}`}>
              <p class="flex-1 m-0">{item.colorName}</p>
              <p class="m-0">{getHex(item.color)}</p>
            </div>
          ))
        }
      </div>
      ))}
  </div>
</main>
</body>
</html>
